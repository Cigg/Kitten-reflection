precision mediump float;

uniform vec4 uClipPlane;
uniform mat4 uMMatrix;
uniform mat4 uPMatrix;
uniform mat4 uVMatrix;
uniform vec3 uEyeCoord;
uniform mat4 uReflectionViewMatrix;
uniform sampler2D uReflectionTexture;
uniform float uTime;

varying vec4 vWorldSpaceNormal;
varying vec4 vWorldSpaceCoord;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }

float rockHeight(vec3 p) {
	float n = 0.0;
  p.y *= 0.0;
	n += (snoise(1.5*p)+1.0)*0.8;
  n += (snoise(3.0*p)+1.0)*0.4;
  n += (snoise(6.0*p)+1.0)*0.2;
	return n;
}

// it's not right
// http://math.stackexchange.com/questions/180418/calculate-rotation-matrix-to-align-vector-a-to-vector-b-in-3d
mat3 rotationMatrix(vec3 v1, vec3 v2 )  
{  
  float temp = v1.y;
  v1.y = v1.z;
  v1.z = temp;
  temp = v2.y;
  v2.y = v2.z;
  v2.z = temp;

	vec3 v = cross(v1, v2);

	float s = length(v);
	float c = dot(v1,v2);

	mat3 I = mat3(0.0);
	I[0][0] = I[1][1] = I[2][2] = 1.0;

	mat3 vcross = mat3(0.0, v.z, -v.y, -v.z, 0.0, v.x, v.y, -v.x, 0.0);

	mat3 R = I + vcross + vcross*vcross*(1.0 - c)/(s*s);

	return R;
}

vec3 rockColor(vec3 p) {
  vec3 rockColor1 = vec3(112.0/255.0, 110.0/255.0, 107.0/255.0);
  vec3 rockColor2 = vec3(84.0/255.0, 76.0/255.0, 71.0/255.0);

  float n = 0.0;
  for(float i = 1.0; i < 3.0; i += 1.0) {
    n += (1.0/pow(2.0,i*0.5))*(snoise(0.2*p*pow(2.0,i))+1.0);
  }

  vec3 color = mix(rockColor1, rockColor2, smoothstep(0.8, 1.5,n));
  // Darker color near the water surface
  color -= 1.0*(smoothstep(0.0,0.2, 0.07*(1.0-abs(vWorldSpaceCoord.y))));
  return color;
}

void main() {
	float clipPos = dot (vWorldSpaceCoord.xyz, uClipPlane.xyz) + uClipPlane.w;
  if(clipPos < 0.0 || vWorldSpaceCoord.y < 0.0)
  	discard;

	float delta = 1.0/50.0;
	vec3 xDiff = vec3(1.0, 0.0, 0.0)*delta;
	vec3 yDiff = vec3(0.0, 0.0, 1.0)*delta;
  // bump mapping
	vec3 surfaceNormal = normalize(vec3(rockHeight(vWorldSpaceCoord.xyz-xDiff) - rockHeight(vWorldSpaceCoord.xyz+xDiff), 1.0, rockHeight(vWorldSpaceCoord.xyz-yDiff) - rockHeight(vWorldSpaceCoord.xyz+yDiff)));
	mat3 r = rotationMatrix(vec3(0.0,1.0,0.0), normalize(vWorldSpaceNormal.xyz));
	surfaceNormal = surfaceNormal*r;

  // diffuse light
  vec3 finalColor = rockColor(vWorldSpaceCoord.xyz);
	float diff = dot(normalize(vec3(-0.2,1,-0.2)), surfaceNormal);
	diff = max(0.0, diff);
	finalColor *= diff;

	gl_FragColor = vec4(finalColor, 1.0);
}